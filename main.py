import random
from imgurpython import ImgurClient
from controlMethods import *
import logging
import asyncio
import time
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
import threading
import asyncio
import aiogram
from aiogram.types import ContentTypes, Message
from controlUserDB import USERS, PAY
from keyboards import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile
import os
from datetime import datetime, timedelta
import threading
from aiogram.dispatcher.filters import Command
import requests
from pathlib import Path
from config import *

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
temp_user_db = {}
last_message_db = {}
card_text = '–ê–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –µ—â–µ –Ω–µ—Ç—É'
client = ImgurClient(client_id, client_secret)
IMAGE_DIR = "images"

class UserStates(StatesGroup):
    QUESTION1 = State()
    QUESTION2 = State()
    QUESTION3 = State()

    ADMIN_QUESTION0 = State()
    ADMIN_QUESTION1 = State()
    ADMIN_QUESTION2 = State()

    TAG_EDIT = State()
    CARD_EDIT = State()
    NEW_TEACH = State()
    GET_TEACH = State()
    USER_FIND = State()


class Anketa(StatesGroup):
    name = State()
    age = State()
    boobs = State()
    weight = State()
    height = State()
    city = State()
    clothing_size = State()
    shoe_size = State()
    h1_i_price = State()
    h1_you_price = State()
    h2_i_price = State()
    h2_you_price = State()
    night_h1_i_price = State()
    night_h1_you_price = State()
    full_night_i_price = State()
    full_night_you_price = State()
    photo = State()


@dp.callback_query_handler(text='find_user')
async def find_call(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    if callback.from_user.id in admins:
        last_message_db[callback.from_user.id] = await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤–æ—Ä–∫–µ—Ä–∞ –±–µ–∑ @', reply_markup=keyboardCancel())
        await UserStates.USER_FIND.set()



@dp.message_handler(state=UserStates.USER_FIND)
async def processUSER_FIND(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        try:
            user = USERS.get(USERS.username == message.text)
            user_id = user.user_id
            date = datetime.fromtimestamp(user.timestamp)
            current_date = datetime.fromtimestamp(time.time())
            days_in_team = (current_date - date).days
            count = [0, 0, 0]
            tag = user.tag
            for log in PAY.select():
                if log.user_id == user_id:
                    count[2] += log.count
                    tm = detect_time(log.timestamp)
                    if tm == 0:
                        count[0] += log.count
                        count[1] += log.count
                    if tm == 1:
                        count[1] += log.count
            if user.teacher:
                text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: _{user_id}_| *–£—á–∏—Ç–µ–ª—å*
üìÜ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: _{days_in_team}_
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: _{tag}_

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: *{count[0]}* RUB 
‚îî –ó–∞ –º–µ—Å—è—Ü: *{count[1]}* RUB 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: *{count[2]}* RUB

'''
            else:
                if user.teach == '1':
                    text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: _{user_id}_
üìÜ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: _{days_in_team}_
üë®‚Äçüè´–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: _–í –æ–∂–∏–¥–∞–Ω–∏–∏..._
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: *{count[0]} RUB* 
‚îî –ó–∞ –º–µ—Å—è—Ü: *{count[1]} RUB* 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: *{count[2]} RUB*

            '''
                elif user.teach not in ('0', '2'):
                    text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: _{user_id}_
üìÜ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: _{days_in_team}_
üë®‚Äçüè´–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: _{USERS.get(USERS.username == user.teach).tag}_
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: *{count[0]} RUB* 
‚îî –ó–∞ –º–µ—Å—è—Ü: *{count[1]} RUB* 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: *{count[2]} RUB*

            '''
                else:
                    text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: _{user_id}_
üìÜ–ö–æ–ª-–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: _{days_in_team}_
üë®‚Äçüè´–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: _–ù–µ –≤—ã–±—Ä–∞–Ω_
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: *{count[0]} RUB* 
‚îî –ó–∞ –º–µ—Å—è—Ü: *{count[1]} RUB* 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: *23{count[2]} RUB*'''
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id,text=text, reply_markup=keyboardCancel(),parse_mode="Markdown")
        except Exception as e:
            print(e)
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id,text='–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.\n–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º',reply_markup=keyboardCancel())


async def show_main_menu(message):
    try:
        id = message.message.chat.id
    except:
        id = message.from_user.id
    try:
        await last_message_db[id].delete()
    except:
        pass
    try:
        status = USERS.get(USERS.user_id == id).status
        if status == 0:
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=id,text='–ó–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')
        elif status == 1:
            if id in admins:
                last_message_db[message.from_user.id] = await bot.send_message(id,text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \r\n–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', reply_markup=keyboardMain(True))
            else:
                last_message_db[message.from_user.id] = await bot.send_message(id, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \r\n ', reply_markup=keyboardMain())
        elif status == 2:
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=id,text='–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
    except Exception as e:
        temp_user_db[id] = ['', '', [], 'last_message']
        temp_user_db[id][3] = last_message_db[message.from_user.id] = await bot.send_message(id,text='–ü—Ä–∏–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å –∑–∞—è–≤–∫—É!', reply_markup=keyboardReq())


def detect_time(timestamp):
    date = datetime.fromtimestamp(timestamp)
    current_date = datetime.now()
    if str(date).split(' ')[0] == str(current_date).split(' ')[0]:
        return 0
    elif str(date).split(' ')[0].split('-')[:-1] == str(current_date).split(' ')[0].split('-')[:-1]:
        return 1


@dp.callback_query_handler(text='back')
async def add_profit(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await state.finish()
    await show_main_menu(callback)

@dp.message_handler(commands='start')
async def main(message: types.Message):
    if message.from_user.id == message.chat.id:
        try:
            await last_message_db[message.from_user.id].delete()
        except:
            pass
        if message.from_user.username == None:
            await message.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø—Ä–æ—Ñ–∏–ª—å')
        else:
            await show_main_menu(message)


@dp.callback_query_handler(text='edit_card')
async def edit_card(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    if callback.from_user.id in admins:
        last_message_db[callback.from_user.id] = await bot.send_message(chat_id=callback.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç card', reply_markup=keyboardCancel())
        await UserStates.CARD_EDIT.set()
        await callback.answer()


@dp.message_handler(state=UserStates.CARD_EDIT)
async def processEdit_card(message: types.Message,state: FSMContext):
    global card_text
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        card_text = message.text
        await bot.send_message(chat_id=message.from_user.id, text=f'–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç card —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        await state.finish()
        await show_main_menu(message)



@dp.message_handler(commands='card')
async def chat_card(message: types.Message):
    msg = await message.answer(card_text, reply_markup=keyboardCard())
    await asyncio.sleep(10)
    await msg.delete()
    await message.delete()

@dp.message_handler(commands='help')
async def chat_card(message: types.Message):
    msg = await message.answer(help_text, parse_mode='HTML', disable_web_page_preview=True)
    await asyncio.sleep(10)
    await msg.delete()
    await message.delete()

@dp.message_handler(commands='mp')
async def chat_profile(message: types.Message):
    try:
        user = USERS.get(USERS.user_id == message.from_user.id)
        user_id = message.from_user.id
        count = [0, 0, 0]
        tag = user.tag
        for log in PAY.select():
            if log.user_id == user_id:
                count[2] += log.count
                tm = detect_time(log.timestamp)
                if tm == 0:
                    count[0] += log.count
                    count[1] += log.count
                if tm == 1:
                    count[1] += log.count
        if user.teacher:
            text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i> | <b>–£—á–∏—Ç–µ–ª—å</b>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b> 
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

'''
        else:
            if user.teach == '1':
                text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b> 
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

            '''
            elif user.teach not in ('0', '2'):
                text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b> 
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

            '''
            else:
                text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b> 
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

            '''
        msg = await message.answer(text,parse_mode="HTML")
        await asyncio.sleep(10)
        await msg.delete()
        await message.delete()
    except Exception as e:
        print(e)


@dp.message_handler(commands='Top')
async def Top(message: types.Message):
    db = {}
    for log in PAY.select():
        if log.tag == '0':
            try:
                db[USERS.get(USERS.user_id == log.user_id).tag] += log.count
            except:
                db[USERS.get(USERS.user_id == log.user_id).tag] = log.count
        else:
            try:
                db[log.tag] += log.count
            except:
                db[log.tag] = log.count
    db = {k: v for k, v in sorted(db.items(), key=lambda item: item[1], reverse=True)}
    text = '''<b>üèÜ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>\n'''
    x = 0
    if len(db) > 0:
        for i in db:
            if x == 10:
                break
            if x == 0:
                l = 'ü•á'
            elif x == 1:
                l = 'ü•à'
            elif x == 2:
                l = 'ü•â'
            else:
                l = 'üî∏'
            text += f'\n{l} {i} - {db[i]} ‚ÇΩ'
            x += 1
    else:
        text += f'\n<i>–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ</i>'
    text += f'\n\n<b>üí∏ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {sum(list(db.values()))} ‚ÇΩ</b>'
    msg = await message.answer(text,parse_mode="HTML")
    await asyncio.sleep(10)
    await msg.delete()
    await message.delete()


@dp.message_handler(commands='Topd')
async def Topd(message: types.Message):
    db = {}
    for log in PAY.select():
        if detect_time(log.timestamp) == 0 and log.tag == '0':
            try:
                db[USERS.get(USERS.user_id == log.user_id).tag] += log.count
            except:
                db[USERS.get(USERS.user_id == log.user_id).tag] = log.count
    db = {k: v for k, v in sorted(db.items(), key=lambda item: item[1], reverse=True)}
    text = '''<b>üèÜ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å:</b>\n'''
    x = 0
    if len(db) > 0:
        for i in db:
            if x == 10:
                break
            if x == 0:
                l = 'ü•á'
            elif x == 1:
                l = 'ü•à'
            elif x == 2:
                l = 'ü•â'
            else:
                l = 'üî∏'
            text += f'\n{l} {i} - {db[i]} ‚ÇΩ'
            x += 1
    else:
        text += f'\n<i>–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ</i>'
    text += f'\n\n<b>üí∏ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å: {sum(list(db.values()))} ‚ÇΩ</b>'
    msg = await message.answer(text,parse_mode="HTML")
    await asyncio.sleep(10)
    await msg.delete()
    await message.delete()

@dp.message_handler(commands='Topm')
async def Topm(message: types.Message):
    db = {}
    for log in PAY.select():
        if detect_time(log.timestamp) in (0, 1) and log.tag == '0':
            try:
                db[USERS.get(USERS.user_id == log.user_id).tag] += log.count
            except:
                db[USERS.get(USERS.user_id == log.user_id).tag] = log.count
    db = {k: v for k, v in sorted(db.items(), key=lambda item: item[1], reverse=True)}
    text = '''<b>üèÜ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü:</b>\n'''
    x = 0
    if len(db) > 0:
        for i in db:
            if x == 10:
                break
            if x == 0:
                l = 'ü•á'
            elif x == 1:
                l = 'ü•à'
            elif x == 2:
                l = 'ü•â'
            else:
                l = 'üî∏'
            text += f'\n{l} {i} - {db[i]} ‚ÇΩ'
            x += 1
    else:
        text += f'\n<i>–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü –µ—â–µ –Ω–µ –±—ã–ª–æ</i>'
    text += f'\n\n<b>üí∏ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –º–µ—Å—è—Ü: {sum(list(db.values()))} ‚ÇΩ</b>'
    msg = await message.answer(text,parse_mode="HTML")
    await asyncio.sleep(10)
    await msg.delete()
    await message.delete()

@dp.callback_query_handler(text='send_req')
async def pr_call(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    try:
        status = USERS.get(USERS.user_id == callback.from_user.id).status
        await callback.answer('–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!')
    except:
        last_message_db[callback.from_user.id] = await bot.send_message(chat_id=callback.from_user.id, text='–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –ø—Ä–æ –Ω–∞—Å?', reply_markup=keyboardCancel())
        await UserStates.QUESTION1.set()
        await callback.answer()

#q1
@dp.message_handler(state=UserStates.QUESTION1)
async def processQUESTION1(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        temp_user_db[message.from_user.id][0] = message.text
        last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–ë—ã–ª –ª–∏ –æ–ø—ã—Ç –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ?', reply_markup=keyboardCancel())
        await UserStates.QUESTION2.set()

#q2
@dp.message_handler(state=UserStates.QUESTION2)
async def processQUESTION2(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        temp_user_db[message.from_user.id][1] = message.text
        last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–ë—ã–ª–∏ –ª–∏ –ø—Ä–æ—Ñ–∏—Ç—ã? –µ—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —É –≤–∏–¥–µ —Ñ–∞–π–ª–∞', reply_markup=keyboardCancel_Skip())
        await UserStates.QUESTION3.set()

#q3
@dp.message_handler(state=UserStates.QUESTION3,content_types=[types.ContentType.DOCUMENT,types.ContentType.TEXT])
async def processQUESTION3(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await state.finish()
        await show_main_menu(message)
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚û°Ô∏è':
        temp_user_db[message.from_user.id][2] = '–Ω–µ—Ç'
        add_user(message.from_user.id, message.from_user.username)
        last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞')
        await get_reqs(message, temp_user_db[message.from_user.id])
        await state.finish()
    elif message.text == '–ì–æ—Ç–æ–≤–æ‚úÖ':
        id = message.from_user.id
        try:
            status = USERS.get(USERS.user_id == id).status
            if status == 0:
                last_message_db[message.from_user.id] = await bot.send_message(chat_id=id, text='–ó–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')
            elif status == 1:
                if id in admins:
                    last_message_db[message.from_user.id] = await bot.send_message(id, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=keyboardMain(True))
                else:
                    last_message_db[message.from_user.id] = await bot.send_message(id, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=keyboardMain())
            elif status == 2:
                last_message_db[message.from_user.id] = await bot.send_message(chat_id=id, text='–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        except:
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞')
            add_user(message.from_user.id, message.from_user.username)
            await get_reqs(message, temp_user_db[message.from_user.id])
            await state.finish()
    elif message.document == None:
        last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ë—ã–ª–∏ –ª–∏ –ø—Ä–æ—Ñ–∏—Ç—ã? –µ—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —É –≤–∏–¥–µ —Ñ–∞–π–ª–∞', reply_markup=keyboardCancel_Skip())
    else:
        photo_path = f'profitsPhotos/{random.randint(100,10000000)}.jpg'
        await message.document.download(photo_path)
        temp_user_db[message.from_user.id][2].append(photo_path)
        last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ù–∞–∂–º–∏ –≥–æ—Ç–æ–≤–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ñ–æ—Ç–æ',
                               reply_markup=keyboardFINISH())


@dp.callback_query_handler(text='edit_tag')
async def edit_tag(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    if callback.from_user.id in admins:
        last_message_db[callback.from_user.id] = await bot.send_message(chat_id=callback.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥', reply_markup=keyboardCancel())
        await UserStates.TAG_EDIT.set()
        await callback.answer()


@dp.callback_query_handler(text='teach_adm')
async def teach_adm(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    if callback.from_user.id in admins:
        last_message_db[callback.from_user.id] = await bot.send_message(chat_id=callback.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —É—á–∏—Ç–µ–ª—è', reply_markup=keyboardCancel())
        await UserStates.NEW_TEACH.set()
        await callback.answer()

@dp.callback_query_handler(text='teach')
async def teach_adm(callback: types.CallbackQuery, state: FSMContext):
    if USERS.get(USERS.user_id == callback.from_user.id).teacher == 1:
        study = []
        username = USERS.get(USERS.user_id == callback.from_user.id).username
        for log in USERS.select():
            if log.teach == username:
                study.append(log.username)
        if len(study) == 0:
            await bot.send_message(chat_id=callback.from_user.id, text='–£ –≤–∞—Å –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤')
        else:
            text = '–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:'
            for i in study:
                text += f'\n@{i}'
            max_message_length = 4096

            if len(text) >= max_message_length:
                parts = [text[i:i + max_message_length] for i in range(0, len(text), max_message_length)]
                for part in parts:
                    await bot.send_message(callback.from_user.id, part)
                    await asyncio.sleep(0.2)
            else:
                await bot.send_message(callback.from_user.id, text)
        await state.finish()
        await show_main_menu(callback)
        try:
            await callback.message.delete()
        except:
            pass
    else:
        if USERS.get(USERS.user_id == callback.from_user.id).teach == '0':
            teachers = []
            for log in USERS.select():
                if log.teacher == 1:
                    teachers.append(log.username)
            last_message_db[callback.from_user.id] = await bot.send_message(chat_id=callback.from_user.id, text=f'–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è', reply_markup=teach_keyboard(teachers))
        else:
            if USERS.get(USERS.user_id == callback.from_user.id).teach == '1':
                await bot.send_message(chat_id=callback.from_user.id, text=f'–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –æ–¥–Ω—É –∑–∞—è–≤–∫—É')
                await state.finish()
                await show_main_menu(callback)
            elif USERS.get(USERS.user_id == callback.from_user.id).teach == '2':
                await bot.send_message(chat_id=callback.from_user.id, text=f'–£ –≤–∞—Å —É–∂–µ –±—ã–ª —É—á–∏—Ç–µ–ª—å')
                await state.finish()
                await show_main_menu(callback)
            else:
                await bot.send_message(chat_id=callback.from_user.id, text=f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–∏—Ç–µ–ª—å')
                await state.finish()
                await show_main_menu(callback)
        try:
            await callback.message.delete()
        except:
            pass



@dp.callback_query_handler(Text(startswith='select_teach_'))
async def acc_call(callback: types.CallbackQuery,state: FSMContext):
    teacher = USERS.get(USERS.username == callback.data.split('select_teach_')[1])
    user = USERS.get(USERS.user_id == callback.from_user.id)
    await bot.send_message(chat_id=teacher.user_id, text=f'{user.username} –í—ã–±—Ä–∞–ª –≤–∞—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∏—Ç–µ–ª—è', reply_markup=keyboardAcceptTeacher(callback.from_user.id))
    edit_user(user_id=callback.from_user.id, teach='1')
    await bot.send_message(chat_id=callback.from_user.id, text=f'–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É —É—á–∏—Ç–µ–ª—é.‚úÖ')
    try:
        await callback.message.delete()
    except:
        pass
    await state.finish()
    await show_main_menu(message)


@dp.message_handler(state=UserStates.GET_TEACH)
async def processGet_Teach(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await state.finish()
        await show_main_menu(message)
        return
    teachers = []
    for log in USERS.select():
        if log.teacher == 1:
            teachers.append(log.username)
    if message.text not in teachers:
        last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text=f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è:', reply_markup=teach_keyboard(teachers))
    else:
        teacher = USERS.get(USERS.username == message.text)
        user = USERS.get(USERS.user_id == message.from_user.id)
        await bot.send_message(chat_id=teacher.user_id, text=f'{user.username} –í—ã–±—Ä–∞–ª –í–∞—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∏—Ç–µ–ª—è‚úÖ', reply_markup=keyboardAcceptTeacher(message.from_user.id))
        edit_user(user_id=message.from_user.id, teach='1')
        await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É —É—á–∏—Ç–µ–ª—é‚úÖ')
        await state.finish()
        await show_main_menu(message)


@dp.message_handler(state=UserStates.NEW_TEACH)
async def processTeach(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        try:
            user = USERS.get(USERS.username == message.text)
            if user.teacher:
                edit_user(username=message.text, teacher=0)
                await bot.send_message(chat_id=message.from_user.id, text='–£—á–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ')
            else:
                edit_user(username=message.text, teacher=1)
                await bot.send_message(chat_id=message.from_user.id, text='–£—á–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')
            await bot.send_message(chat_id=user.user_id, text='–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∏—Ç–µ–ª—å!üë®‚Äçüè´')
            await state.finish()
            await show_main_menu(message)
        except:
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.\n–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —É—á–∏—Ç–µ–ª—èüë®‚Äçüè´',
                                   reply_markup=keyboardCancel())


@dp.message_handler(state=UserStates.TAG_EDIT)
async def processTAG(message: types.Message, state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        try:
            USERS.get(USERS.tag == '#'+message.text.replace('#',''))
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id,
                                                                           text='–≠—Ç–æ—Ç —Ç–µ–≥ —É–∂–µ –∑–∞–Ω—è—Ç\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥', reply_markup=keyboardCancel())
        except:
            edit_user(user_id=message.from_user.id, tag='#'+message.text.replace('#',''))
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id,text='–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
            await state.finish()
            await show_main_menu(message)

async def get_reqs(message,answers):
    try:
        username = message.message.chat.username
        id = message.message.chat.id
    except:
        username = message.from_user.username
        id = message.from_user.id
    text = f'–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n@{username}\n1: {answers[0]}\n2: {answers[1]}'
    if answers[2] == '–Ω–µ—Ç':
        temp_user_db[message.from_user.id][3] = await bot.send_message(chat_id=admin_chat_id, text=text,reply_markup=keyboardAccept(id))
    else:
        print(temp_user_db[message.from_user.id][2])
        for photo in temp_user_db[message.from_user.id][2]:
            text += '\n'+client.upload_from_path(path=photo)['link']
        temp_user_db[message.from_user.id][3] = await bot.send_message(chat_id=admin_chat_id, text=text,reply_markup=keyboardAccept(id))

@dp.callback_query_handler(Text(startswith='acc'))
async def acc_call(callback: types.CallbackQuery):
    decision = callback.data
    if 'yes' in decision:
        edit_user(user_id=int(callback.data.split('yes')[1]), status=1)
        await temp_user_db[int(callback.data.split('yes')[1])][3].delete()
        await bot.send_message(chat_id=int(callback.data.split('yes')[1]), text='‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!\n \n–¢—ã –Ω–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å? –£ –Ω–∞—Å –≤ –∫–æ–º–∞–Ω–¥–µ –µ—Å—Ç—å *–≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è.*\n \n–í –±–æ—Ç–µ —Ç—ã *–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞*, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ—á—É—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∫—É—Å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ –ø–æ –¥–æ—Ä–æ–≥–µ.\n \n*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ –≤—Å–µ–º*, —á—Ç–æ–±—ã —É —Ç–µ–±—è –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –ø—Ä–æ–±–ª–µ–º –≤–æ –≤—Ä–µ–º—è –≤–æ—Ä–∫–∞. \n \n–ï—Å–ª–∏ –∂–µ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–ø—ã—Ç, —Ç–æ *–∂–µ–ª–∞–µ–º –ø–æ–±–æ–ª—å—à–µ –ø—Ä–æ—Ñ–∏—Ç–æ–≤!* \n \n*–ü—Ä–æ–ø–∏—à–∏ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.*',parse_mode="Markdown")
    elif 'no' in decision:
        edit_user(user_id=int(callback.data.split('no')[1]), status=2)
        await bot.send_message(chat_id=int(callback.data.split('no')[1]), text='‚ùå–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        await temp_user_db[int(callback.data.split('no')[1])][3].delete()
    try:
        await callback.message.delete()
    except:
        pass

@dp.callback_query_handler(Text(startswith='t_acc'))
async def acc_call(callback: types.CallbackQuery, state: FSMContext):
    decision = callback.data
    if 'yes' in decision:
        edit_user(user_id=int(callback.data.split("_yes")[-1]), teach=USERS.get(USERS.user_id == callback.from_user.id).username)
        await bot.send_message(chat_id=int(callback.data.split("_yes")[-1]), text=f'–£—á–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É‚úÖ')
        await bot.send_message(chat_id=callback.from_user.id, text=f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É‚úÖ')
        try:
            await callback.message.delete()
        except:
            pass
        await state.finish()
        await show_main_menu(callback)
    elif 'no' in decision:
        edit_user(user_id=int(callback.data.split("_no")[-1]), teach='0')
        await bot.send_message(chat_id=int(callback.data.split("_no")[-1]), text=f'–£—á–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É‚ùå')
        await bot.send_message(chat_id=callback.from_user.id, text=f'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É‚ùå')
        try:
            await callback.message.delete()
        except:
            pass
        await state.finish()
        await show_main_menu(callback)


async def delete_message(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def generate_html_files(message: types.Message, data: dict):
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    individual_dir = Path("individual_ankets")
    ankets_dir = Path("ankets")
    images_dir = Path("../images")
    individual_dir.mkdir(exist_ok=True)
    ankets_dir.mkdir(exist_ok=True)
    images_dir.mkdir(exist_ok=True)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π ID
    random_id = random.randint(100000, 999999)
    chat_id = message.chat.id

    # –ò–º—è —Ñ–∞–π–ª–æ–≤
    filename = f"{chat_id}-{random_id}"
    individual_file = individual_dir / f"{filename}.html"
    ankets_file = ankets_dir / f"{filename}.html"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    photo_list = data.get("photo_list", [])
    first_photo_path = ""
    gallery_images_html = ""

    if photo_list:
        # –ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ HTML
        first_photo_path = f"../images/{photo_list[0]}"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞–ª–µ—Ä–µ—é –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ HTML
        gallery_images = []
        for photo in photo_list:
            gallery_images.append(
                f'<img loading="lazy" src="../images/{photo}" alt="" width="1065" height="705">'
            )
        gallery_images_html = "\n".join(gallery_images)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π HTML —Ñ–∞–π–ª (individual_ankets)
    template1 = """<div class="list-item__item js-list-item" data-name="–¢–£–¢ –ò–ú–Ø –ê–ù–ö–ï–¢–´" data-city="–û—á–∫–æ" data-id="3844"> 
        <a href="/ankets/896-nastya-lisitsa.html" class="list-item__image" target="_blank" rel="noopener" data-top="">
            <img loading="lazy" width="140" height="210" alt="" src="–ü–£–¢–¨_–ö_–§–û–¢–û">
        </a>
        <div class="list-item__icons">
        </div>
    </a>
    <div class="list-item__desc">
        <div class="list-item__row">
            <strong>
                –í–æ–∑—Ä–∞—Å—Ç:
            </strong>
            <span>
                –°–Æ–î–ê –ì–û–î–ê –ü–ò–°–ê–¢–¨
            </span>
        </div>
        <div class="list-item__row">
            <strong>
                –ì—Ä—É–¥—å:
            </strong>
            <span>
                –†–ê–ó–ú–ï–† –ì–†–£–î–ò
            </span>
        </div>
        <div class="list-item__row">
            <strong>
                –í–µ—Å:
            </strong>
            <span>
                –°–Æ–î–ê –í–ï–°
            </span>
        </div>
        <div class="list-item__row">
            <strong>
                –†–æ—Å—Ç:
            </strong>
            <span>
                –°–Æ–î–ê –†–û–°–¢
            </span>
        </div>
        <div class="list-item__row list-item__row--full">
            <span class="list-item__cut tags">
                <a href="#"
                    class="cut_tag b-btn--small b-btn--blue disabled "
                    style="text-decoration: none; cursor: pointer;">
                    –§–ï–¢–ò–®–ò
                </a>
            </span>
        </div>
    </div>
    <div class="list-item__title">
        <a href="/ankets/896-nastya-lisitsa.html">–¢–£–¢ –ò–ú–Ø –ê–ù–ö–ï–¢–´</a>
    </div>
    <div class="list-item__address">
        <div class="district">
            <a href="">
                –ì–û–†–û–î –ê–ù–ö–ï–¢–´
            </a>
        </div>

    </div>

    <div class="list-item__buttons ">
        <button  class="b-btn b-btn--blue b-btn--small js-show-phone"
            onclick="showNotification('–¢–µ–ª–µ—Ñ–æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞');">
            <i class="icon-phone-white" aria-hidden="true"></i>
            <span>–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω</span>
        </button>
        <button
            class="b-btn b-btn--blue b-btn--center b-btn--small js-show-tg"
            onclick="showNotification('–¢–µ–ª–µ–≥—Ä–∞–º–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞');">
            <i class="icon-telegram-white" aria-hidden="true"></i>
        </button>
        <button data-id="3844" rel="nofollow noopener"
            class="b-btn b-btn--blue b-btn--center b-btn--small js-show-wa"
            onclick="showNotification('WhatsApp –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞');">
            <i class="icon-whatsapp-white" aria-hidden="true"></i>
        </button>
    </div>

    <div id="notification" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); 
        background-color: rgba(0, 0, 0, 0.8); color: white; padding: 15px 25px; border-radius: 5px; z-index: 1000;">
    </div>

    <script>
    function showNotification(message) {
        const notification = document.getElementById('notification');
        notification.innerText = message;
        notification.style.display = 'block';

        setTimeout(() => {
            notification.style.display = 'none';
        }, 3000);
    }
    </script>

    <style>
    .b-btn {
        cursor: pointer;
        margin: 5px;
    }
    </style>

    <div class="list-item__price-list">
        <div class="list-item__price">

        </div>
    </div>
</div>
</div>"""

    filled_template1 = template1.replace("–¢–£–¢ –ò–ú–Ø –ê–ù–ö–ï–¢–´", data['name'])
    filled_template1 = filled_template1.replace("–°–Æ–î–ê –ì–û–î–ê –ü–ò–°–ê–¢–¨", data['age'])
    filled_template1 = filled_template1.replace("–†–ê–ó–ú–ï–† –ì–†–£–î–ò", data['boobs'])
    filled_template1 = filled_template1.replace("–°–Æ–î–ê –í–ï–°", data['weight'])
    filled_template1 = filled_template1.replace("–°–Æ–î–ê –†–û–°–¢", data['height'])
    filled_template1 = filled_template1.replace("–ì–û–†–û–î –ê–ù–ö–ï–¢–´", data['city'])
    filled_template1 = filled_template1.replace("/ankets/896-nastya-lisitsa.html", f"/ankets/{filename}.html")
    filled_template1 = filled_template1.replace("–ü–£–¢–¨_–ö_–§–û–¢–û", first_photo_path if photo_list else "")

    with open(individual_file, "w", encoding="utf-8") as f:
        f.write(filled_template1)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π HTML —Ñ–∞–π–ª (ankets)
    template2 = """<!DOCTYPE html>
<html lang="ru">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>–≠–ª–∏—Ç–Ω–∞—è –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞</title>


	<link rel="preload" href="themes/molvo/assets/fonts/hinted-Commissioner-Bold.woff2" as="font" type="font/woff2"
		crossorigin>
	<link rel="preload" href="themes/molvo/assets/fonts/hinted-Commissioner-ExtraBold.woff2" as="font" type="font/woff2"
		crossorigin>
	<link rel="preload" href="themes/molvo/assets/fonts/hinted-Commissioner-Regular.woff2" as="font" type="font/woff2"
		crossorigin>
	<link href="/css/app.css" rel="stylesheet">
	<link rel="stylesheet" href="/css/style.css">
	<link rel="manifest" href="themes/molvo/assets/images/site.webmanifest">
	<link rel="mask-icon" href="themes/molvo/assets/images/safari-pinned-tab.svg" color="#ff2103">
	<meta name="format-detection" content="telephone=no">
	<meta name="msapplication-TileColor" content="#ffffff">
	<meta name="theme-color" content="#ffffff">
	<meta name="csrf-token" content="X6zlFaSDOjOfcFhnlypTLmSN3lt5lSl39gE7ikEI">
	<meta name="exoclick-site-verification" content="c0ff7f96fde95f69a4f665bc0cc5d793">
	<meta name="enot" content="6541656433809NL0_nMLJUpT4wTtybeKcYi3JTegbE1mO">
	<meta name="recaptcha-key" id="recaptcha-key" content="6LchUeMqAAAAAD6QFmbqvkByVzzsTvFHQMLU5agU">
	<script
		type="text/javascript"> (function (m, e, t, r, i, k, a) { m[i] = m[i] || function () { (m[i].a = m[i].a || []).push(arguments) }; m[i].l = 1 * new Date(); for (var j = 0; j < document.scripts.length; j++) { if (document.scripts[j].src === r) { return; } } k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a) })(window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym"); ym(92567495, "init", { clickmap: true, trackLinks: true, accurateTrackBounce: true }); </script>
	<noscript>
		<div><img src="https://mc.yandex.ru/watch/92567495" style="position:absolute; left:-9999px;" alt="" /></div>
	</noscript> <!-- /Yandex.Metrika counter -->
<link rel="icon" href="/favicon.png" type="image/png" />



	<link rel="stylesheet" href="https://cdn.plyr.io/3.6.8/plyr.css" />

</head>

<body>


	<div class="page-wrapper">
		<header class="header">
			<div class="header__inner">
				<div class="wrapper">
					<div class="header__search">
						<form class="search-panel" method="GET">
							<div class="header-right-group">
								<a href="/" class="header__logo">
									<img loading="lazy" src="/images/sweetsnights.svg"
										style="width: 130px; height: 40px; min-width: 130px"
										alt="Ashoo —Å–∞–π—Ç –∏–Ω—Ç–∏–º–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤" height="38" width="130">
								</a>
								<div class="search-panel__box">
									<div class="search-panel__panel">
										<div class="search-panel__inner">
											<input type="text" inputmode="search" id="search-q"
												class="search-panel__input" aria-label="–ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É"
												placeholder="–ò–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ" name="q" data-empty="ru" value="">
											<button type="button" class="search-panel__close">
												<i class="icon-close-white" aria-hidden="true"></i>
												–ó–∞–∫—Ä—ã—Ç—å
											</button>
											<button type="submit" class="search-panel__submit">–ò—Å–∫–∞—Ç—å</button>
										</div>
									</div>


								</div>
							</div>

							<div class="header__dummy">
								<div class="header-topbar">
									<div class="wrapper">
										<nav class="header-topbar__menu">
											<ul>

												<li>
													<a href="/">–ì–ª–∞–≤–Ω–∞—è</a>
												</li>
												<li>
													<a href="/health .php.html">Health+</a>
												</li>
												<li>
													<a href="/location.html">–ê–¥—Ä–µ—Å</a>
												</li>
												<div class="header-topbar__geolocation">
													<button type="button" class="geolocation-box__trigger">
														<i class="icon-geolocation" aria-hidden="true"></i>
														<span>–ú–æ—Å–∫–≤–∞</span>
													</button>
												</div>
												<style>
													.header-topbar__geolocation {
														margin-left: 60px;
													}
												</style>
											</ul>
										</nav>

									</div>
						</form>
		</header>


		<main class="main">
			<script type="application/ld+json">
	null
</script>
			<div class="wrapper">
				<ul class="pathway__list" itemscope itemtype="http://schema.org/BreadcrumbList">
				</ul>
				<article class="item">
					<header class="item-header">
						<h1 class="section__title" data-top="0">
							–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –ò–ú–Ø, –°–Æ–î–ê –í–û–ó–†–ê–°–¢ –≥–æ–¥ - vip —Å–µ–∫—Å —É—Å–ª—É–≥–∏
						</h1>

						<div class="item-header__panel ">
							<div class="item-contacts__container">
								<div class="item-contacts__part part-left">
								</div>

								<div class="item-contacts__part part-right">

									<button class="btn" id="orderButton">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>

									<div class="item-contacts__messengers">
										<button rel="nofollow noopener" data-id="896"
											class="b-btn b-btn--outline-blue js-show-tg item-contacts__item"
											onclick="if(window.fbq)fbq('track', 'Contact');ym(92567495,'reachGoal','STARTTELEGRAM', {URL: document.location.href});return true;">
											<i aria-hidden="true" class="icon-telegram-blue"></i>
											<span>Telegram</span>
										</button>
										<button data-id="896" rel="nofollow noopener"
											class="b-btn b-btn--outline-blue js-show-wa item-contacts__item"
											onclick="if(window.fbq)fbq('track', 'Contact');ym(92567495,'reachGoal','STARTWHATSAPP', {URL: document.location.href});return true;">
											<i aria-hidden="true" class="icon-whatsapp-blue"></i>
											<span>Whatsapp</span>
										</button>
									</div>
								</div>
							</div>
						</div>
					</header>

    <div class="item__panel">
        <div class="item__gallery">
            <div class="fotorama" data-nav="thumbs">
                –ì–ê–õ–ï–†–ï–Ø_–§–û–¢–û
            </div>
        </div>
    <div class="item__main">
							<div class="item-list__grid">
								<ul class="item-list">
									<li class="item-list__row">
										<div class="item-list__title">–ì–æ—Ä–æ–¥:</div>
										<div class="item-list__main" id="city">–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –ì–û–†–û–î</div>
									</li>
									<li class="item-list__row">
										<div class="item-list__title">–í–æ–∑—Ä–∞—Å—Ç:</div>
										<div class="item-list__main" id="yo">–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –°–ö–û–õ–¨–ö–û –ì–û–î–û–í</div>
									</li>
									<li class="item-list__row">
										<div class="item-list__title">–ì—Ä—É–¥—å:</div>
										<div class="item-list__main" id="breast">–°–Æ–î–ê –†–ê–ó–ú–ï–† –ì–†–£–î–ò–ù</div>
									</li>
									<li class="item-list__row">
										<div class="item-list__title">–í–µ—Å:</div>
										<div class="item-list__main" id="weight">–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –í–ï–°</div>
									</li>
									<li class="item-list__row">
										<div class="item-list__title">–†–æ—Å—Ç:</div>
										<div class="item-list__main" id="height">–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –†–û–°–¢</div>
									</li>
									<li class="item-list__row">
										<div class="item-list__title">–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã:</div>
										<div class="item-list__main" id="clothing_size">–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –†–ê–ó–ú–ï–† –û–î–ï–ñ–î–´</div>
									</li>
									<li class="item-list__row">
										<div class="item-list__title">–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏:</div>
										<div class="item-list__main" id="shoe_size">–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –†–ê–ó–ú–ï–† –û–ë–£–í–ò</div>
									</li>
								</ul>




								</li>
								<li class="item-list__row">
									<div class="item-list__title">
										–¢–µ–≥–∏:
									</div>
									<div class="item-list__main b__tags">
										<a href="" class="b-btn--small b-btn--blue is-starred tag-6">
											–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–∫–∞
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–ê–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–ú–ë–†
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–≠—Å–∫–æ—Ä—Ç
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–¶–µ–ª—É—é—Å—å
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–í—ã–µ–∑–¥
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–ï—Å—Ç—å –ø–æ–¥—Ä—É–≥–∞
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											GFE
										</a>
										<a href="" class="b-btn--small b-btn--blue ">
											–° –≤–∏–¥–µ–æ
										</a>
									</div>
								</li>
								</ul>
							</div>
							<div class="item-content">
								<p>
									–Ø —Å—Ç–∞–Ω—É —Ç–≤–æ–µ–π —Ñ–∞–≤–æ—Ä–∏—Ç–∫–æ–π‚ù§)elite escort
									–°—Å—ã–ª–∫–∏ –Ω–∞ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –≤ —Ç–µ–∫—Å—Ç–µ –∫ –∞–Ω–∫–µ—Ç–µ
								</p>	
							</div>
						</div>
					</div>
					<div class="item-grid">
						<div class="item-grid__row item-grid__row--main">
							<section class="item-time__section">
								<div class="d-flex d-flex__fd_row d-flex__ai_c"
									style="justify-content: space-between; margin-bottom: 20px;">
									<h2 class="item__subtitle" style="margin: 0; line-height: normal;">
										–¢–∞—Ä–∏—Ñ
									</h2>
								</div>
								<div class="item-time__row">
									<h3 class="item-time__title">
										–î–Ω—ë–º
									</h3>
									<div class="item-time__grid">
										<div class="item-time__cell">
											<div class="item-time__item ">
												<div class="item-time__header">
													<div class="item-time__icon">
														<img loading="lazy" src="/themes/molvo/assets/images/sun.svg"
															width="50" height="50" alt="">
													</div>
													<div class="item-time__name">
														1 —á–∞—Å
													</div>
												</div>
												<div class="item-time__list">
													<span>–£ –º–µ–Ω—è</span>
													<strong>–°–Æ–î–ê –¶–ï–ù–ê –£ –ú–ï–ù–Ø –ó–ê –ß–ê–° ‚ÇΩ</strong>
												</div>
												<div class="item-time__list">
													<span>–£ —Ç–µ–±—è*</span>
													<strong>–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê –ß–ê–° ‚ÇΩ</strong>
												</div>
											</div>
										</div>
										<div class="item-time__cell">
											<div class="item-time__item ">
												<div class="item-time__header">
													<div class="item-time__icon">
														<img loading="lazy" src="/themes/molvo/assets/images/sun-2.svg"
															width="50" height="50" alt="">
													</div>
													<div class="item-time__name">
														2 —á–∞—Å–∞
													</div>
												</div>
												<div class="item-time__list">
													<span>–£ –º–µ–Ω—è</span>
													<strong>–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –ú–ï–ù–Ø –ó–ê 2 –ß–ê–°–ê ‚ÇΩ</strong>
												</div>
												<div class="item-time__list">
													<span>–£ —Ç–µ–±—è*</span>
													<strong>–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê 2 –ß–ê–°–ê ‚ÇΩ</strong>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="item-time__row">
									<h3 class="item-time__title">
										–ù–æ—á—å—é
									</h3>
									<div class="item-time__grid">
										<div class="item-time__cell">
											<div class="item-time__item item-time__item--dark">
												<div class="item-time__header">
													<div class="item-time__icon">
														<img loading="lazy" src="/themes/molvo/assets/images/moon.svg"
															width="50" height="50" alt="">
													</div>
													<div class="item-time__name">
														1 —á–∞—Å
													</div>
												</div>
												<div class="item-time__list">
													<span>–£ –º–µ–Ω—è</span>
													<strong>–ó–î–ï–°–¨ –¶–ï–ù–ê –ó–ê –ß–ê–° –£ –ú–ï–ù–Ø –ù–û–ß–¨–Æ ‚ÇΩ</strong>
												</div>
												<div class="item-time__list">
													<span>–£ —Ç–µ–±—è*</span>
													<strong>–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê –ß–ê–° –ù–û–ß–¨–Æ ‚ÇΩ</strong>
												</div>
											</div>
										</div>
										<div class="item-time__cell">
											<div class="item-time__item item-time__item--dark">
												<div class="item-time__header">
													<div class="item-time__icon">
														<img loading="lazy" src="/themes/molvo/assets/images/moon-2.svg"
															width="50" height="50" alt="">
													</div>
													<div class="item-time__name">
														–ù–æ—á—å
													</div>
												</div>
												<div class="item-time__list">
													<span>–£ –º–µ–Ω—è</span>
													<strong>–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –ú–ï–ù–Ø –ó–ê –ù–û–ß–¨ ‚ÇΩ</strong>
												</div>
												<div class="item-time__list">
													<span>–£ —Ç–µ–±—è*</span>
													<strong>–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê –ù–û–ß–¨ ‚ÇΩ</strong>
												</div>
											</div>
										</div>
									</div>
								</div>


							</section>
						</div>
						<section class="item-feature">

						</section>
						<section class="item-feature">
							<h2 class="item__subtitle">
								–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
							</h2>
							<div class="item-feature__grid">
								<div class="item-feature__cell">
									<div class="item-feature__title">
										–°–µ–∫—Å
									</div>
									<ul class="item-feature__list">
										<li>
											<a href="">–°–µ–∫—Å
												–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</a>
										</li>
										<li>
											<a href="">–°–µ–∫—Å –∞–Ω–∞–ª—å–Ω—ã–π</a>

										</li>
										<li>
											<a href="">–°–µ–∫—Å
												–≥—Ä—É–ø–ø–æ–≤–æ–π</a>

										</li>
										<li>
											<a href="">–°–µ–∫—Å
												–ª–µ—Å–±–∏–π—Å–∫–∏–π</a>

										</li>
										<li>
											<a href="">–°–µ–º–µ–π–Ω–æ–π
												–ø–∞—Ä–µ</a>
										</li>
										<li>
											<a href="">–ú–∏–Ω–µ—Ç –≤
												—Ä–µ–∑–∏–Ω–∫–µ</a>
										</li>
										<li>
											<a href="">–ú–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏</a>
										</li>
										<li>
											<a href="">–ú–∏–Ω–µ—Ç
												–≥–ª—É–±–æ–∫–∏–π</a>
										</li>
										<li>
											<a href="">–ú–∏–Ω–µ—Ç
												–≥–æ—Ä–ª–æ–≤–æ–π</a>

										</li>
										<li>
											<a href="">–ú–∏–Ω–µ—Ç –≤
												–º–∞—à–∏–Ω–µ</a>
										</li>
										<li>
											<a href="">–ö—É–Ω–Ω–∏–ª–∏–Ω–≥—É—Å</a>
										</li>
										<li>
											<a href="">–¶–µ–ª—É—é—Å—å</a>
										</li>
										<li>
											<a href="">–ò–≥—Ä—É—à–∫–∏</a>

										</li>
										<li>
											<a href="">–û–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞
												–≥—Ä—É–¥—å</a>
										</li>
										<li>
											<a href="">–û–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞
												–ª–∏—Ü–æ</a>
										</li>
										<li>
											<a href="">–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤
												—Ä–æ—Ç</a>
											<div class="item-feature_desc">

											</div>
										</li>
										<li>
											<a href="poza-69/moskva">–ü–æ–∑–∞ 69</a>
										</li>
									</ul>
								</div>
								<div class="item-feature__cell">
									<div class="item-feature__title">
										–ú–∞—Å—Å–∞–∂
									</div>
									<ul class="item-feature__list">
										<li>
											<a href="">–ú–∞—Å—Å–∞–∂
												–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</a>
										</li>
										<li>
											<a href="">–ú–∞—Å—Å–∞–∂
												—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π</a>
										</li>
										<li>
											<a href="">–ú–∞—Å—Å–∞–∂
												—É—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π</a>
										</li>
										<li>
											<a href="">–ú–∞—Å—Å–∞–∂
												—ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π</a>
										</li>
										<li>
											<a href="">–ú–∞—Å—Å–∞–∂
												—Å–µ–º–µ–π–Ω–æ–π –ø–∞—Ä–µ</a>
										</li>
									</ul>
								</div>
								<div class="item-feature__cell">
									<div class="item-feature__title">
										–°—Ç—Ä–∏–ø—Ç–∏–∑
									</div>
									<ul class="item-feature__list">
										<li>
											<a href="">–°—Ç—Ä–∏–ø—Ç–∏–∑ –Ω–µ
												–ø—Ä–æ—Ñ–∏</a>
										</li>
										<li>
											<a href="">–õ–µ—Å–±–∏
												–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ</a>
										</li>
										<li>
											<a href="">–õ–µ—Å–±–∏-—à–æ—É
												–ª–µ–≥–∫–æ–µ</a>
										</li>
									</ul>
								</div>
								<div class="item-feature__cell">
									<div class="item-feature__title">
										–≠–∫—Å—Ç—Ä–∏–º
									</div>
									<ul class="item-feature__list">
										<li>
											<a href="">–°—Ç—Ä–∞–ø–æ–Ω</a>

										</li>
										<li>
											<a href="">–ê–Ω–∏–ª–∏–Ω–≥—É—Å
												–∫–ª–∏–µ–Ω—Ç—É</a>

										</li>
										<li>
											<a href="">–ê–Ω–∏–ª–∏–Ω–≥—É—Å –º–Ω–µ</a>
										</li>
										<li>
											<a href="">–ó–æ–ª–æ—Ç–æ–π
												–¥–æ–∂–¥—å –∫–ª–∏–µ–Ω—Ç—É</a>

										</li>
										<li>
											<a href="">–ó–æ–ª–æ—Ç–æ–π –¥–æ–∂–¥—å
												–º–Ω–µ</a>
											<div class="item-feature_desc">
											</div>
										</li>
										<li>
											<a href="">–§–∏—Å—Ç–∏–Ω–≥
												–∞–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç—É</a>
											<div class="item-feature_desc">

											</div>
										</li>
										<li>
											<a href="">–§–∏—Å—Ç–∏–Ω–≥
												–∞–Ω–∞–ª—å–Ω—ã–π –º–Ω–µ</a>
											<div class="#">

											</div>
										</li>
										<li>
											<a href="#">–§–∏—Å—Ç–∏–Ω–≥
												–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</a>
											<div class="item-feature_desc">

											</div>
										</li>
										<li>
											<a href="#">–§–∏–Ω–≥–µ—Ä–∏–Ω–≥</a>
										</li>
									</ul>
								</div>
								<div class="item-feature__cell">
									<div class="item-feature__title">
										–°–∞–¥–æ-–º–∞–∑–æ
									</div>
									<ul class="item-feature__list">
										<li>
											<a href="#">–ì–æ—Å–ø–æ–∂–∞</a>
										</li>
										<li>
											<a href="#">–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</a>
										</li>
										<li>
											<a href="#">–†–∞–±—ã–Ω—è</a>
											<div class="item-feature_desc">

											</div>
										</li>
										<li>
											<a href="#">–ü–æ–¥—á–∏–Ω–µ–Ω–∏–µ</a>
										</li>
										<li>
											<a href="#">–ë–æ–Ω–¥–∞–∂</a>
										</li>
										<li>
											<a href="#">–ü–æ—Ä–∫–∞</a>
										</li>
										<li>
											<a href="#">–§–µ—Ç–∏—à</a>
											>
										</li>
										<li>
											<a href="#">–¢—Ä–∞–º–ø–ª–∏–Ω–≥</a>
										</li>
										<li>
											<a href="#">–®–∏–±–∞—Ä–∏</a>
										</li>
										<li>
											<a href="#">–§–µ–π—Å—Å–∏—Ç—Ç–∏–Ω–≥</a>
										</li>
										<li>
											<a href="#">–ö–æ–ø—Ä–æ (–≤—ã–¥–∞—á–∞)</a>
											<div class="item-feature_desc">

											</div>
										</li>
									</ul>
								</div>
								<div class="item-feature__cell">
									<div class="item-feature__title">
										–†–∞–∑–Ω–æ–µ
									</div>
									<ul class="item-feature__list">
										<li>
											<a href="#">GFE</a>
										</li>
										<li>
											<a href="#">–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ</a>
										</li>
										<li>
											<a href="#">–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã</a>
										</li>
										<li>
											<a href="#">–§–æ—Ç–æ/–≤–∏–¥–µ–æ
												—Å—ä–µ–º–∫–∞</a>
										</li>
										<li>
											<a href="#">–ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–µ–∑–¥–∫–∞–º –≤
												–¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</a>
										</li>
										<li>
											<a href="#">–ï—Å—Ç—å —à–µ–Ω–≥–µ–Ω</a>
										</li>
										<li>
											<a href="#">–ï—Å—Ç—å
												–∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç</a>
										</li>
										<li>
											<a href="#">–ö–ª–∏–∑–º–∞</a>
										</li>
										<li>
											<a href="#">–ü–∏–ø-—à–æ—É</a>
										</li>
									</ul>
								</div>
								<div class="item-feature__cell">
									<div class="item-feature__title">
										–¢–æ–ª—å–∫–æ —É –º–µ–Ω—è
									</div>
									<ul class="item-feature__list">
										<li>
											–°–∞–º—ã–π –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –∏ –ì–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ –Ω–∞ –¥–æ—Å—Ç–æ–π–Ω–æ–º —É—Ä–æ–≤–Ω–µ
										</li>
										<li>
											–±–µ–∑ —Å–∏–ª–∏–∫–æ–Ω–∞ –∏ –ë–µ–∑ –ø–∞—Ñ–æ—Å–∞
										</li>
										<li>
											PlayStation, –∫–∞–ª—å—è–Ω –∏
											–î–æ—Ä–æ–≥–∏–µ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
										</li>
										<li>
											–ü–∞—Ä–∫–æ–≤–∫–∞ —É–¥–æ–±–Ω–∞—è –∏
											–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è
										</li>
										<li>
											–ë–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
											–ù–∞—Å—Ç–æ—è—â–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∫–∞)) –æ—Ç–≤–µ—á–∞—é –Ω–∞ –∑–≤–æ–Ω–∫–∏ —Å–∞–º–∞)
										</li>
										<li>
											–°–≤–µ–∂–∏–µ –ø–æ–ø–µ—Ä—Å—ã
										</li>
										<li>
											–õ—é–±–æ–π –∫–∞–ø—Ä–∏–∑
											–ó–∞ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏)
										</li>
										<li>
											–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –º–æ–∏—Ö –≥–æ—Å—Ç–µ–π))
										</li>
										<li>
											–ü—Ä–∞–∫—Ç–∏–∫—É—é —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–µ–∫—Å
										</li>
									</ul>
								</div>
								<div class="item-feature__sizer"></div>
							</div>
						</section>

					</div>
					<div class="item-grid__row item-grid__row--aside">
					</div>
			</div>
			</article>
	</div>




	<style>
		.modal-prepay_confirm {
			border-radius: 12px;
			color: #ffffff;
			padding: 8px;
			margin-top: 8px;
			cursor: pointer;
			min-width: 150px;
			text-align: center;
			justify-content: center;
			font-size: 14px;
		}

		.modal-prepay {
			min-width: 300px;
			max-width: 620px;
		}
	</style>

	</main>
	<div class="footer-info">
		<div class="wrapper">
			<table>
				<thead>
					<tr>
						<th>–°–∞–π—Ç –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–æ–∫</th>
						<th>Sweetnights —ç—Ç–æ:</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>‚úÖ –ù–∞–¥–µ–∂–Ω–æ</td>
						<td>–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</td>
					</tr>
					<tr>
						<td>‚úÖ –£–¥–æ–±–Ω–æ</td>
						<td>–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–æ–∫ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ —Ü–µ–Ω—É</td>
					</tr>
					<tr>
						<td>‚úÖ –ë—ã—Å—Ç—Ä–æ</td>
						<td>–†—è–¥–æ–º —Å –í–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥—ë—Ç—Å—è</td>
					</tr>
					<tr>
						<td>‚úÖ –ë–µ–∑–æ—Ç–∫–∞–∑–Ω–æ</td>
						<td>–ù–æ–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–æ–∫ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ –∏ –æ–Ω–∏ –∂–¥—É—Ç –≤–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞</td>
					</tr>
					<tr>
						<td>‚úÖ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ</td>
						<td>–†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º 24 —á–∞—Å–∞ –≤ —Å—É—Ç–∫–∏</td>
					</tr>
				</tbody>
			</table>
			<hr />

		</div>
	</div>

	<div class="wrapper">
		<div class="footer__grid">
			<div class="footer__copyright">
				<a href="/" class="footer__logo">
					<img loading="lazy" src="../images/sweetsnights.svg" alt="Ashoo —Å–∞–π—Ç –∏–Ω—Ç–∏–º–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤" height="38"
						width="134">
				</a>
				<p>&copy; 2021‚Äì2025, Sweetnights ‚Äî
					–ø—Ä–æ–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–æ–∫, –º–∞—Å—Å–∞–∂–∏—Å—Ç–æ–∫ –∏ —ç—Å–∫–æ—Ä—Ç-–º–æ–¥–µ–ª–µ–π –ø–æ –≤—Å–µ–π
					–†–æ—Å—Å–∏–∏.</p>
			</div>
			<div class="footer__menu">
				<ul>
					<li>
						<a href="/">–ì–ª–∞–≤–Ω–∞—è</a>
					</li>
					<li>
						<a href="o-proekte">–û –ø—Ä–æ–µ–∫—Ç–µ</a>
					</li>
					<li>
						<a href="health">HEALTH+</a>

					</li>
				</ul>
				<ul>
					<li>
						<a href="polzovatelskoe-soglashenie-dlya-klientov">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ
							—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤</a>
					</li>
					<li>
						<a href="contacts">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
					</li>
				</ul>
			</div>
			<div class="footer__mark">
				<img loading="lazy" src="../images/logo.svg" alt="–°–∞–π—Ç 18+" width="38" height="38">
			</div>
		</div>
	</div>
	</footer>
	<button id="b_scroller" type="button">
		<i class="icon-up" aria-hidden="true" title="–ù–∞–≤–µ—Ä—Ö"></i>
	</button>
	</div>





	</div>
	</div>





	<!DOCTYPE html>
	<html lang="ru">

	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞</title>

	</head>

	<body>
		<div id="orderModal" class="modal">
			<div class="modal-content">
				<span class="close">√ó</span>
				<h1>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>

				<label for="meetingDate">–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:</label>
				<input type="date" id="meetingDate" required>

				<label for="meetingTime">–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏:</label>
				<input type="time" id="meetingTime" required>

				<label for="meetingPlace">–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:</label>
				<select id="meetingPlace" required>
					<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ</option>
					<option value="–£ –º–æ–¥–µ–ª–∏">–£ –º–æ–¥–µ–ª–∏</option>
					<option value="–£ –∫–ª–∏–µ–Ω—Ç–∞">–£ –∫–ª–∏–µ–Ω—Ç–∞</option>
				</select>

				<label for="tariff">–¢–∞—Ä–∏—Ñ:</label>
				<select id="tariff" required>
					<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ</option>
				</select>

				<label for="preferences">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</label>
				<textarea id="preferences" rows="4" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è" required></textarea>

				<label for="contact">–ö–æ–Ω—Ç–∞–∫—Ç (Telegram/WhatsApp):</label>
				<input type="text" id="contact" placeholder="Telegram/WhatsApp" required>

				<a class="baton" href="#" id="linkOrder">–û—Ñ–æ—Ä–º–∏—Ç—å</a>
			</div>

		</div>

		<script>

			document.getElementById('orderButton').onclick = function () {
				document.getElementById('orderModal').style.display = "block";
			}

			document.getElementsByClassName('close')[0].onclick = function () {
				document.getElementById('orderModal').style.display = "none";
			}

			window.onclick = function (event) {
				if (event.target == document.getElementById('orderModal')) {
					document.getElementById('orderModal').style.display = "none";
				}
			}

			const inputs = document.querySelectorAll('#orderModal input, #orderModal select');
			const linkOrder = document.getElementById('linkOrder');

			function checkInput() {
				const allFilled = Array.from(inputs).every(el => {
					return el.value && !(el.tagName === 'SELECT' && el.selectedIndex === 0);
				});
				linkOrder.classList.toggle('active', allFilled);
			}

			inputs.forEach(input => {
				input.addEventListener('change', checkInput);
				input.addEventListener('input', checkInput);
			});

			linkOrder.onclick = function (event) {
				event.preventDefault();

				const orderData = {
					date: document.getElementById("meetingDate").value,
					time: document.getElementById("meetingTime").value,
					place: document.getElementById("meetingPlace").value,
					tariff: document.getElementById("tariff").value,
					preferences: document.getElementById("preferences").value,
					contact: document.getElementById("contact").value,
					amount: document.getElementById("tariff").value
				};

				localStorage.setItem('orderData', JSON.stringify(orderData));


				window.location.href = '/1742043985-1.html';
			};
		</script>

		<script>

const allTariffs = [];

function loadTariffsData() {
	const dayItems = document.querySelectorAll('.item-time__row:not(.night) .item-time__item');
	const nightItems = document.querySelectorAll('.item-time__row.night .item-time__item');

	const processItems = (items, timeOfDay) => {
		items.forEach(item => {
			const name = item.querySelector('.item-time__name').textContent.trim();
			const lists = item.querySelectorAll('.item-time__list');

			if (lists.length === 2) {
				const priceMe = lists[0].querySelector('strong').textContent.trim();
				const priceYou = lists[1].querySelector('strong').textContent.trim();

				allTariffs.push({
					timeOfDay,
					duration: name,
					me: priceMe,
					you: priceYou
				});
			}
		});
	};

	processItems(dayItems, '–î–µ–Ω—å');
	processItems(nightItems, '–ù–æ—á—å');
}

function updateTariffOptions(place) {
	const tariffSelect = document.getElementById("tariff");
	tariffSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ</option>';

	allTariffs.forEach(tariff => {
		let price = '';
		let locationLabel = '';

		if (place === '–£ –º–æ–¥–µ–ª–∏') {
			price = tariff.me;
			locationLabel = '–£ –º–æ–¥–µ–ª–∏';
		} else if (place === '–£ –∫–ª–∏–µ–Ω—Ç–∞') {
			price = tariff.you;
			locationLabel = '–£ –∫–ª–∏–µ–Ω—Ç–∞';
		} else {
			return; 
		}

		if (price) {
			const option = document.createElement('option');
			option.value = price;
			option.textContent = `[${tariff.timeOfDay}] ${tariff.duration} ‚Äî ${locationLabel} ‚Äî ${price}‚ÇΩ`;
			tariffSelect.appendChild(option);
		}
	});
}

document.getElementById("meetingPlace").addEventListener('change', function () {
	updateTariffOptions(this.value);
	checkInput();
});

window.onload = function () {
	document.querySelectorAll('.item-time__title').forEach(title => {
		if (title.textContent.includes('–ù–æ—á—å—é')) {
			title.closest('.item-time__row').classList.add('night');
		}
	});

	loadTariffsData();
};


		</script>



		<link href="https://cdnjs.cloudflare.com/ajax/libs/fotorama/4.6.4/fotorama.css" rel="stylesheet">


		<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


		<script src="https://cdnjs.cloudflare.com/ajax/libs/fotorama/4.6.4/fotorama.js"></script>

		<script>
			document.addEventListener('DOMContentLoaded', function () {

				$('.fotorama').fotorama({
					nav: 'thumbs',
					loop: true,
					autoplay: false
				});
			});
		</script>


	</body>

	</html>


</body>

<div id="contact-modal" style="
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  align-items: center;
  justify-content: center;
  z-index: 1000;
">
  <div style="
    background: white;
    padding: 20px 30px;
    border-radius: 10px;
    max-width: 300px;
    text-align: center;
  ">
    <p style="margin-bottom: 20px;">–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞</p>
    <button onclick="document.getElementById('contact-modal').style.display='none';"
      style="padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
      –û–∫
    </button>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const showModal = () => {
      const modal = document.getElementById('contact-modal');
      modal.style.display = 'flex'; // –ü–æ–∫–∞–∑–∞—Ç—å
    };

    document.querySelectorAll('.js-show-tg, .js-show-wa').forEach(button => {
      button.addEventListener('click', function (event) {
        event.preventDefault(); // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        showModal();
      });
    });
  });
</script>

</html>"""

    filled_template2 = template2.replace("–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –ò–ú–Ø, –°–Æ–î–ê –í–û–ó–†–ê–°–¢ –≥–æ–¥", f"{data['name']}, {data['age']} –≥–æ–¥")
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –ì–û–†–û–î", data['city'])
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –°–ö–û–õ–¨–ö–û –ì–û–î–û–í", data['age'])
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –†–ê–ó–ú–ï–† –ì–†–£–î–ò–ù", data['boobs'])
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –í–ï–°", data['weight'])
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –†–û–°–¢", data['height'])
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –†–ê–ó–ú–ï–† –û–î–ï–ñ–î–´", data['clothing_size'])
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –ü–û–î–°–¢–ê–í–ò–¢–¨ –†–ê–ó–ú–ï–† –û–ë–£–í–ò", data['shoe_size'])
    filled_template2 = filled_template2.replace("–ì–ê–õ–ï–†–ï–Ø_–§–û–¢–û",
                                                gallery_images_html if photo_list else '<img loading="lazy" src="../images/1.svg" alt="" width="1065" height="705">')

    # –ó–∞–º–µ–Ω—è–µ–º —Ü–µ–Ω—ã
    filled_template2 = filled_template2.replace("–°–Æ–î–ê –¶–ï–ù–ê –£ –ú–ï–ù–Ø –ó–ê –ß–ê–° ‚ÇΩ", data['h1_i_price'])
    filled_template2 = filled_template2.replace("–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê –ß–ê–° ‚ÇΩ", data['h1_you_price'])
    filled_template2 = filled_template2.replace("–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –ú–ï–ù–Ø –ó–ê 2 –ß–ê–°–ê ‚ÇΩ", data['h2_i_price'])
    filled_template2 = filled_template2.replace("–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê 2 –ß–ê–°–ê ‚ÇΩ", data['h2_you_price'])
    filled_template2 = filled_template2.replace("–ó–î–ï–°–¨ –¶–ï–ù–ê –ó–ê –ß–ê–° –£ –ú–ï–ù–Ø –ù–û–ß–¨–Æ ‚ÇΩ", data['night_h1_i_price'])
    filled_template2 = filled_template2.replace("–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê –ß–ê–° –ù–û–ß–¨–Æ ‚ÇΩ", data['night_h1_you_price'])
    filled_template2 = filled_template2.replace("–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –ú–ï–ù–Ø –ó–ê –ù–û–ß–¨ ‚ÇΩ", data['full_night_i_price'])
    filled_template2 = filled_template2.replace("–ó–î–ï–°–¨ –¶–ï–ù–ê –£ –¢–ï–ë–Ø –ó–ê –ù–û–ß–¨ ‚ÇΩ", data['full_night_you_price'])

    with open(ankets_file, "w", encoding="utf-8") as f:
        f.write(filled_template2)

    return filename


@dp.callback_query_handler(text="sozd_ank")
async def sozd_ank_call(callback: types.CallbackQuery, state: FSMContext):
    msg = await bot.send_message(
        callback.from_user.id, text="–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è:"
    )
    await Anketa.name.set()
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await state.update_data(last_bot_message_id=msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞


@dp.message_handler(state=Anketa.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.age.set()


@dp.message_handler(state=Anketa.age)
async def get_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:")
        return

    await state.update_data(age=message.text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏:")
    await state.update_data(last_bot_message_id=msg.message_id)

    await Anketa.boobs.set()


@dp.message_handler(state=Anketa.boobs)
async def get_boobs(message: types.Message, state: FSMContext):
    await state.update_data(boobs=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):")
    await state.update_data(last_bot_message_id=msg.message_id)

    await Anketa.weight.set()


@dp.message_handler(state=Anketa.weight)
async def get_weight(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.height.set()


@dp.message_handler(state=Anketa.height)
async def get_height(message: types.Message, state: FSMContext):
    await state.update_data(height=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    await state.update_data(last_bot_message_id=msg.message_id)

    await Anketa.city.set()


@dp.message_handler(state=Anketa.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.clothing_size.set()


@dp.message_handler(state=Anketa.clothing_size)
async def get_clothing_size(message: types.Message, state: FSMContext):
    await state.update_data(clothing_size=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.shoe_size.set()


@dp.message_handler(state=Anketa.shoe_size)
async def get_shoe_size(message: types.Message, state: FSMContext):
    await state.update_data(shoe_size=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ —á–∞—Å (—É –º–µ–Ω—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.h1_i_price.set()


@dp.message_handler(state=Anketa.h1_i_price)
async def get_h1_i_price(message: types.Message, state: FSMContext):
    await state.update_data(h1_i_price=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ —á–∞—Å (—É —Ç–µ–±—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.h1_you_price.set()


@dp.message_handler(state=Anketa.h1_you_price)
async def get_h1_you_price(message: types.Message, state: FSMContext):
    await state.update_data(h1_you_price=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞ (—É –º–µ–Ω—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.h2_i_price.set()


@dp.message_handler(state=Anketa.h2_i_price)
async def get_h2_i_price(message: types.Message, state: FSMContext):
    await state.update_data(h2_i_price=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞ (—É —Ç–µ–±—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.h2_you_price.set()


@dp.message_handler(state=Anketa.h2_you_price)
async def get_h2_you_price(message: types.Message, state: FSMContext):
    await state.update_data(h2_you_price=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ 1 —á–∞—Å –Ω–æ—á—å—é (—É –º–µ–Ω—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.night_h1_i_price.set()


@dp.message_handler(state=Anketa.night_h1_i_price)
async def get_night_h1_i_price(message: types.Message, state: FSMContext):
    await state.update_data(night_h1_i_price=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ 1 —á–∞—Å –Ω–æ—á—å—é (—É —Ç–µ–±—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.night_h1_you_price.set()


@dp.message_handler(state=Anketa.night_h1_you_price)
async def get_night_h1_you_price(message: types.Message, state: FSMContext):
    await state.update_data(night_h1_you_price=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ –ø–æ–ª–Ω—É—é –Ω–æ—á—å (—É –º–µ–Ω—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.full_night_i_price.set()


@dp.message_handler(state=Anketa.full_night_i_price)
async def get_full_night_i_price(message: types.Message, state: FSMContext):
    await state.update_data(full_night_i_price=message.text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await message.answer("–¶–µ–Ω–∞ –∑–∞ –ø–æ–ª–Ω—É—é –Ω–æ—á—å (—É —Ç–µ–±—è):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await Anketa.full_night_you_price.set()


@dp.message_handler(state=Anketa.full_night_you_price)
async def get_full_night_you_price(message: types.Message, state: FSMContext):
    await state.update_data(full_night_you_price=message.text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤–æ"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton("–ì–æ—Ç–æ–≤–æ")
    keyboard.add(button)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    msg = await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=keyboard,
    )
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.update_data(
        photo_list=[]
    )  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
    await Anketa.photo.set()


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Anketa.photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
    chat_id = message.chat.id
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    file_id = photo.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    random_number = random.randint(100000, 999999)
    filename = f"{chat_id}_{random_number}.jpg"
    filepath = os.path.join(IMAGE_DIR, filename)

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await bot.download_file(file_path, filepath)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –∏–∑ state –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        data = await state.get_data()
        photo_list = data.get("photo_list", [])
        photo_list.append(filename)
        await state.update_data(photo_list=photo_list)

        await message.answer(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ
    await delete_message(message)


@dp.message_handler(state=Anketa.photo, text="–ì–æ—Ç–æ–≤–æ")
async def finish_photo(message: types.Message, state: FSMContext):
    """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø—Ä–∏–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –≤—ã–≤–æ–¥–∏–º –∞–Ω–∫–µ—Ç—É —Å —Ñ–æ—Ç–æ."""

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message(message)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if "last_bot_message_id" in data:
        try:
            await bot.delete_message(message.chat.id, data["last_bot_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    data = await state.get_data()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã
    filename = await generate_html_files(message, data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∫–µ—Ç–µ
    anketa_text = "<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:</b>\n"
    anketa_text += f"–ò–º—è: {data['name']}\n"
    anketa_text += f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
    anketa_text += f"–†–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏: {data['boobs']}\n"
    anketa_text += f"–í–µ—Å: {data['weight']}\n"
    anketa_text += f"–†–æ—Å—Ç: {data['height']}\n"
    anketa_text += f"–ì–æ—Ä–æ–¥: {data['city']}\n"
    anketa_text += f"–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {data['clothing_size']}\n"
    anketa_text += f"–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏: {data['shoe_size']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ —á–∞—Å (—É –º–µ–Ω—è): {data['h1_i_price']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ —á–∞—Å (—É —Ç–µ–±—è): {data['h1_you_price']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞ (—É –º–µ–Ω—è): {data['h2_i_price']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞ (—É —Ç–µ–±—è): {data['h2_you_price']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ 1 —á–∞—Å –Ω–æ—á—å—é (—É –º–µ–Ω—è): {data['night_h1_i_price']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ 1 —á–∞—Å –Ω–æ—á—å—é (—É —Ç–µ–±—è): {data['night_h1_you_price']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ –ø–æ–ª–Ω—É—é –Ω–æ—á—å (—É –º–µ–Ω—è): {data['full_night_i_price']}\n"
    anketa_text += f"–¶–µ–Ω–∞ –∑–∞ –ø–æ–ª–Ω—É—é –Ω–æ—á—å (—É —Ç–µ–±—è): {data['full_night_you_price']}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
    await message.answer(anketa_text, parse_mode="HTML")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ state
    photo_list = data.get("photo_list", [])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if photo_list:
        media = types.MediaGroup()
        for filename in photo_list:
            filepath = os.path.join(IMAGE_DIR, filename)
            if os.path.exists(filepath):
                media.attach_photo(types.InputFile(filepath))
            else:
                print(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        try:
            await bot.send_media_group(message.chat.id, media=media)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ: {e}")

    await bot.send_message(message.from_user.id,
                           text="–ê–Ω–∫–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
                           reply_markup=keyboardBack())
    await state.finish()


@dp.callback_query_handler(text='lc')
async def lc_call(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    user_id = callback.from_user.id
    user = USERS.get(USERS.user_id == callback.from_user.id)
    date = datetime.fromtimestamp(user.timestamp)
    current_date = datetime.fromtimestamp(time.time())
    days_in_team = (current_date - date).days
    count = [0,0,0]
    tag = user.tag
    for log in PAY.select():
        if log.user_id == user_id:
            count[2] += log.count
            tm = detect_time(log.timestamp)
            if tm == 0:
                count[0] += log.count
                count[1] += log.count
            if tm == 1:
                count[1] += log.count
    if user.teacher:
        text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i>| <b>–£—á–∏—Ç–µ–ª—å</b>
üìÜ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: <i>{days_in_team}</i>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}
    
üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b>
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

'''
    else:
        if user.teach == '1':
            text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i>
üìÜ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: <i>{days_in_team}</i>
üë®‚Äçüè´–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: <i>–í –æ–∂–∏–¥–∞–Ω–∏–∏...</i>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b>
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

            '''
        elif user.teach not in ('0', '2'):
            text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i>
üìÜ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: <i>{days_in_team}</i>
üë®‚Äçüè´–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: <i>{USERS.get(USERS.username == user.teach).tag}</i>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b>
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

            '''
        else:
            text = f'''
üë§–ü—Ä–æ—Ñ–∏–ª—å: <i>{user_id}</i>
üìÜ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: <i>{days_in_team}</i>
üë®‚Äçüè´–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: <i>–ù–µ –≤—ã–±—Ä–∞–Ω</i>
üëõ–ò–º—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: {tag}

üí≥ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:
‚îî –ó–∞ –¥–µ–Ω—å: <b>{count[0]} RUB</b>
‚îî –ó–∞ –º–µ—Å—è—Ü: <b>{count[1]} RUB</b> 
‚îî –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{count[2]} RUB</b>

            '''

    last_message_db[callback.from_user.id] = await bot.send_message(chat_id=user_id, text=text, reply_markup=keyboardBack(),parse_mode="HTML")
    await callback.answer()


@dp.callback_query_handler(text='add_none')
async def add_profit(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    if callback.from_user.id in admins:
        temp_user_db[callback.from_user.id] = ['', '', None]
        last_message_db[callback.from_user.id] = await bot.send_message(chat_id=callback.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞', reply_markup=keyboardCancel())
        await UserStates.ADMIN_QUESTION1.set()
        await callback.answer()


@dp.callback_query_handler(text='addprofit')
async def add_profit(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    if callback.from_user.id in admins:
        temp_user_db[callback.from_user.id] = ['', '', '']
        last_message_db[callback.from_user.id] = await bot.send_message(chat_id=callback.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞', reply_markup=keyboardCancel())
        await UserStates.ADMIN_QUESTION1.set()
        await callback.answer()

#q0
@dp.message_handler(state=UserStates.ADMIN_QUESTION0)
async def processQUESTION0(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        if message.text.isdigit():
            temp_user_db[message.from_user.id][2] = int(message.text)
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞',
                                   reply_markup=keyboardCancel())
            await UserStates.ADMIN_QUESTION1.set()
        else:
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')

#q1
@dp.message_handler(state=UserStates.ADMIN_QUESTION1)
async def processQUESTION1(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        if temp_user_db[message.from_user.id][2] == None:
            temp_user_db[message.from_user.id][0] = int(message.text)
            last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id,
                                                                           text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –≤–æ—Ä–∫–µ—Ä–∞ –±–µ–∑ #',
                                                                           reply_markup=keyboardCancel())
            await UserStates.ADMIN_QUESTION2.set()
        else:
            if message.text.isdigit():
                temp_user_db[message.from_user.id][0] = int(message.text)
                last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id,
                                                                               text='–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤–æ—Ä–∫–µ—Ä–∞ –±–µ–∑ @',
                                                                               reply_markup=keyboardCancel())
                await UserStates.ADMIN_QUESTION2.set()
            else:
                last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id,
                                                                               text='–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')


#q2
@dp.message_handler(state=UserStates.ADMIN_QUESTION2)
async def processQUESTION2(message: types.Message,state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    if message.text in ('–û—Ç–º–µ–Ω–∞‚ùå', '/start'):
        await show_main_menu(message)
        await state.finish()
    else:
        if temp_user_db[message.from_user.id][2] == None:
            add_log('#'+message.text.replace('#', ''), temp_user_db[message.from_user.id][0], True)
            await message.answer('–ì–æ—Ç–æ–≤–æ!')
            await show_main_menu(message)
            await state.finish()
        else:
            try:
                user = USERS.get(USERS.username == message.text)
                user_id = user.user_id
                tag = user.tag
                temp_user_db[message.from_user.id][1] = user_id
                await final_profit(temp_user_db[message.from_user.id], tag, message.from_user.id)
                last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–ü—Ä–æ—Ñ–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
                await state.finish()
                await show_main_menu(message)
            except Exception as e:
                print(e)
                last_message_db[message.from_user.id] = await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.\n–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º', reply_markup=keyboardCancel())

async def final_profit(temp_user_db, tag, user_id):
    count = 0
    for log in PAY.select():
        if log.user_id == temp_user_db[1]:
            count += 1
    if count >= 3:
        edit_user(user_id=temp_user_db[1], teach='2')

    add_log(temp_user_db[1], temp_user_db[0])
    await bot.send_message(chat_id=user_id, text=f'''üíã –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂!

üí¥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {temp_user_db[0]} RUB

üëë–í–æ—Ä–∫–µ—Ä: {tag}
–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {temp_user_db[0]} RUB''')


async def can_ban_members(chat_id, user_id):
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        return chat_member.can_restrict_members
    except:
        return False


@dp.message_handler(commands="ban")
async def cmd_ban(message: types.Message):
    if await can_ban_members(message.chat.id, message.from_user.id):
        user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id
        await bot.kick_chat_member(chat_id=message.chat.id, user_id=user_id)
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!', reply_markup=keyboardUnban(user_id))

@dp.message_handler(commands='mute')
async def mute_user(message: types.Message):
    if await can_ban_members(message.chat.id, message.from_user.id):
        try:
            seconds = int(message.get_args())
            if seconds <= 30:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ö–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 30")
                return
        except:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mute <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥>")
            return

        user_id = message.reply_to_message.from_user.id
        chat_id = message.chat.id

        try:
            until_date = datetime.now() + timedelta(seconds=seconds)
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=until_date,
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False
            )
            await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥!', reply_markup=keyboardUnmute(user_id))
        except Exception as e:
            print(e)

@dp.callback_query_handler(Text(startswith='unban_'))
async def unban_user(callback: types.CallbackQuery):
    if await can_ban_members(callback.message.chat.id, callback.from_user.id):
        user_id = int(callback.data.split('_')[1])
        chat_id = callback.message.chat.id
        try:
            await bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
            await bot.send_message(chat_id=chat_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω')
            try:
                await callback.message.delete()
            except:
                pass
        except Exception as e:
            print(e)

@dp.callback_query_handler(Text(startswith='unmute_'))
async def unmute_user(callback: types.CallbackQuery):
    if await can_ban_members(callback.message.chat.id, callback.from_user.id):
        user_id = int(callback.data.split('_')[1])
        chat_id = callback.message.chat.id
        try:
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
            await bot.send_message(chat_id=chat_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω‚úÖ')
            try:
                await callback.message.delete()
            except:
                pass
        except Exception as e:
            print(e)


@dp.message_handler(text='–û—Ç–º–µ–Ω–∞‚ùå')
async def back(message: types.Message, state: FSMContext):
    try:
        await last_message_db[message.from_user.id].delete()
    except:
        pass
    await state.finish()
    await show_main_menu(message)

@dp.message_handler(content_types = ['new_chat_members', 'left_chat_member'])
async def delete(message):
    await bot.delete_message(message.chat.id, message.message_id)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling())
